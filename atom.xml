<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title type="text">Kira Star</title>
    <subtitle type="html">MemE is a powerful and highly customizable GoHugo theme for personal blogs.</subtitle>
    <updated>2020-04-08T12:14:01+08:00</updated>
    <id>https://utenau.github.io/</id>
    <link rel="alternate" type="text/html" href="https://utenau.github.io/" />
    <link rel="self" type="application/atom+xml" href="https://utenau.github.io/atom.xml" />
    <author>
            <name>Nadia</name>
            <uri>https://utenau.github.io/</uri>
            
                <email>z.giny@foxmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights>
    <generator uri="https://gohugo.io/" version="0.62.2">Hugo</generator>
        <entry>
            <title type="text">小程序学习总结（一）:小程序的框架</title>
            <link rel="alternate" type="text/html" href="https://utenau.github.io/posts/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/" />
            <id>https://utenau.github.io/posts/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80/</id>
            <updated>2020-04-07T22:57:54+08:00</updated>
            <published>2020-04-07T21:30:23+08:00</published>
            <author>
                    <name>Nadia</name>
                    <uri>https://utenau.github.io/</uri>
                    <email>z.giny@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[[toc]
代码构成与文件结构 文件结构 其中app.json是小程序的全局配置
{ &quot;pages&quot;:[ &quot;pages/index/index&quot;, &quot;pages/logs/logs&quot; ], &quot;window&quot;:{ &quot;backgroundTextStyle&quot;:&quot;light&quot;, &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;, &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;, &quot;navigationBarTextStyle&quot;:&quot;black&quot; } } pages是小程序所包含的页面的相对路径，首个为打开所渲染的页面。 windows是小程序所有视窗的设置，例如导航栏的背景颜色，字体样式等，若与具体页面的设置发生冲突则以具体设置为准。
project.config.json是工具配置
 通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。
 sitemap.json
 sitemap.json 文件用于配置小程序及其页面是否允许被微信索引，文件内容为一个 JSON 对象，如果没有 sitemap.json ，则默认为所有页面都允许被索引
 代码构成 从文件结构可以看出：文件名为app的三个文件决定了小程序的全局配置。
代码由四种文件类型构成：
 json :JSON 是一种数据格式，并不是编程语言，在小程序中，JSON扮演的静态配置的角色。 wxml : WXML 充当的就是类似 HTML 的角色,用来描述小程序中当前这个页面的结构。 wxss : CSS 用来描述页面的样子，小程序中描述页面样子的是wxss。 js : 一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 JS 脚本文件来处理用户的操作。  初体验 1 2 3 4 5 6 7 8 9 10 11  &lt;!]]></summary>
            
                <content type="html"><![CDATA[<p>[toc]</p>
<h2 id="代码构成与文件结构">代码构成与文件结构</h2>
<h3 id="文件结构">文件结构</h3>
<p><img src="https://s1.ax1x.com/2020/04/07/G23jsK.png" alt="G23jsK.png"></p>
<p>其中<em>app.json</em>是小程序的全局配置</p>
<pre><code>{
  &quot;pages&quot;:[
    &quot;pages/index/index&quot;,
    &quot;pages/logs/logs&quot;
  ],
  &quot;window&quot;:{
    &quot;backgroundTextStyle&quot;:&quot;light&quot;,
    &quot;navigationBarBackgroundColor&quot;: &quot;#fff&quot;,
    &quot;navigationBarTitleText&quot;: &quot;WeChat&quot;,
    &quot;navigationBarTextStyle&quot;:&quot;black&quot;
  }
}
</code></pre><p><strong>pages</strong>是小程序所包含的页面的相对路径，首个为打开所渲染的页面。
<strong>windows</strong>是小程序所有视窗的设置，例如导航栏的背景颜色，字体样式等，若与具体页面的设置发生冲突则以具体设置为准。</p>
<p><em>project.config.json</em>是工具配置</p>
<blockquote>
<p>通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置。考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。</p>
</blockquote>
<p><em>sitemap.json</em></p>
<blockquote>
<p>sitemap.json 文件用于配置小程序及其页面是否允许被微信索引，文件内容为一个 JSON 对象，如果没有 sitemap.json ，则默认为所有页面都允许被索引</p>
</blockquote>
<h4 id="代码构成">代码构成</h4>
<p>从文件结构可以看出：文件名为app的三个文件决定了小程序的全局配置。</p>
<p>代码由四种文件类型构成：</p>
<ul>
<li>json :JSON 是一种数据格式，并不是编程语言，在小程序中，JSON扮演的静态配置的角色。</li>
<li>wxml : WXML 充当的就是类似 HTML 的角色,用来描述小程序中当前这个页面的结构。</li>
<li>wxss : CSS 用来描述页面的样子，小程序中描述页面样子的是wxss。</li>
<li>js : 一个服务仅仅只有界面展示是不够的，还需要和用户做交互：响应用户的点击、获取用户的位置等等。在小程序里边，我们就通过编写 JS 脚本文件来处理用户的操作。</li>
</ul>
<h2 id="初体验">初体验</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="c">&lt;!--</span><span class="c">home.wxml</span><span class="c">--&gt;</span>
<span class="c">&lt;!--</span><span class="c"> 数据绑定 {{}}mustache语法 </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">view</span><span class="p"></span><span class="p">&gt;</span>Hello {{name}}<span class="p">&lt;</span><span class="p">/</span><span class="nt">view</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">view</span><span class="p"></span><span class="p">&gt;</span>The age : {{age}}<span class="p">&lt;</span><span class="p">/</span><span class="nt">view</span><span class="p">&gt;</span>
<span class="c">&lt;!--</span><span class="c"> 列表展示 </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">view</span> <span class="na">wx:for</span><span class="o">=</span><span class="s">&#34;{{students}}&#34;</span><span class="p"></span><span class="p">&gt;</span>{{item.name}}-{{item.age}}<span class="p">&lt;</span><span class="p">/</span><span class="nt">view</span><span class="p">&gt;</span>

<span class="c">&lt;!--</span><span class="c"> 事件监听 </span><span class="c">--&gt;</span>
<span class="p">&lt;</span><span class="nt">view</span><span class="p"></span><span class="p">&gt;</span>当前的计数是：{{counter}}<span class="p">&lt;</span><span class="p">/</span><span class="nt">view</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">size</span><span class="o">=</span><span class="s">&#34;mini&#34;</span> <span class="na">bindtap</span><span class="o">=</span><span class="s">&#34;handleBtnClick&#34;</span><span class="p"></span><span class="p">&gt;</span>+<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">button</span> <span class="na">size</span><span class="o">=</span><span class="s">&#34;mini&#34;</span> <span class="na">bindtap</span><span class="o">=</span><span class="s">&#34;handleSubtraction&#34;</span><span class="p"></span><span class="p">&gt;</span>-<span class="p">&lt;</span><span class="p">/</span><span class="nt">button</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// home.js
</span><span class="c1"></span><span class="nx">Page</span><span class="p">(</span><span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;Nadia&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span><span class="p">,</span>
    <span class="nx">students</span><span class="o">:</span><span class="p">[</span>
      <span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">100</span> <span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span> <span class="p">,</span><span class="nx">age</span><span class="o">:</span> <span class="mi">10</span><span class="p">}</span><span class="p">,</span>
      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">101</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">11</span> <span class="p">}</span><span class="p">,</span>
      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">102</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">12</span> <span class="p">}</span><span class="p">,</span>
      <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">103</span><span class="p">,</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="nx">age</span><span class="o">:</span> <span class="mi">13</span> <span class="p">}</span><span class="p">,</span>
    <span class="p">]</span><span class="p">,</span>
    <span class="nx">counter</span><span class="o">:</span> <span class="mi">0</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">handleBtnClick</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">counter</span> <span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">counter</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">handleSubtraction</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">counter</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">counter</span> <span class="o">-=</span> <span class="mi">1</span>
      <span class="c1">// 第一次 this.data.couter 只写了counter报了错
</span><span class="c1"></span>      <span class="c1">// this.setData重置本page对象的data值，指明数值要精确。
</span><span class="c1"></span>    <span class="p">}</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>运行结果：</p>
<p><img src="https://s1.ax1x.com/2020/04/07/G2Nn8H.md.png" alt="G2Nn8H.png"></p>
<h2 id="小程序的mvvm">小程序的MVVM</h2>
<p><img src="https://s1.ax1x.com/2020/04/07/G2aFAK.md.png" alt="G2aFAK.png"></p>
<h3 id="两种编程范式">两种编程范式</h3>
<ul>
<li>命令式（imperative）编程：详细的命令机器怎么（How）去处理一件事情以达到你想要的结果（What）</li>
</ul>
<blockquote>
<p>dom操作，比如用js改变页面的一个数值，你首先需要用document.findbyId()找到节点，然后赋值</p>
</blockquote>
<ul>
<li>声明式（Declarative）编程 ：只告诉你想要的结果（What），机器自己摸索过程（How）</li>
</ul>
<blockquote>
<p>在上述数据绑定中，我们使用了mustache语法，即{{}},在渲染home.wxml时，遇到这种标记，系统会自动js中找对应的变量。</p>
</blockquote>
<h2 id="全局配置app与局部配置page">全局配置app与局部配置page</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;pages&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">&#34;pages/home/home&#34;</span><span class="p">,</span>
    <span class="s2">&#34;pages/category/category&#34;</span>
  <span class="p">]</span><span class="p">,</span>
  <span class="nt">&#34;window&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;navigationBarBackgroundColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#ff5777&#34;</span><span class="p">,</span>
    <span class="nt">&#34;navigationBarTextStyle&#34;</span><span class="p">:</span> <span class="s2">&#34;white&#34;</span><span class="p">,</span>
    <span class="nt">&#34;navigationBarTitleText&#34;</span><span class="p">:</span> <span class="s2">&#34;我的小程序&#34;</span><span class="p">,</span>
    <span class="nt">&#34;backgroundColor&#34;</span><span class="p">:</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span>
    <span class="nt">&#34;backgroundTextStyle&#34;</span><span class="p">:</span> <span class="s2">&#34;light&#34;</span><span class="p">,</span>
    <span class="nt">&#34;enablePullDownRefresh&#34;</span><span class="p">:</span> <span class="kc">false</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nt">&#34;tabBar&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;selectedColor&#34;</span><span class="p">:</span> <span class="s2">&#34;#ff5777&#34;</span><span class="p">,</span>
    <span class="nt">&#34;list&#34;</span><span class="p">:</span> <span class="p">[</span><span class="p">{</span>
      <span class="nt">&#34;pagePath&#34;</span><span class="p">:</span> <span class="s2">&#34;pages/home/home&#34;</span><span class="p">,</span>
      <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;首页&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iconPath&#34;</span><span class="p">:</span> <span class="s2">&#34;assets/tabbar/home.png&#34;</span><span class="p">,</span>
      <span class="nt">&#34;selectedIconPath&#34;</span><span class="p">:</span> <span class="s2">&#34;assets/tabbar/home_active.png&#34;</span>
    <span class="p">}</span><span class="p">,</span><span class="p">{</span>
      <span class="nt">&#34;pagePath&#34;</span><span class="p">:</span> <span class="s2">&#34;pages/category/category&#34;</span><span class="p">,</span>
      <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;分类&#34;</span><span class="p">,</span>
      <span class="nt">&#34;iconPath&#34;</span><span class="p">:</span><span class="s2">&#34;assets/tabbar/category.png&#34;</span><span class="p">,</span>
      <span class="nt">&#34;selectedIconPath&#34;</span><span class="p">:</span><span class="s2">&#34;assets/tabbar/category_active.png&#34;</span>
    <span class="p">}</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="err">&lt;</span><span class="err">!</span><span class="err">-</span><span class="err">-</span><span class="err">h</span><span class="err">o</span><span class="err">m</span><span class="err">e</span><span class="err">.</span><span class="err">w</span><span class="err">x</span><span class="err">m</span><span class="err">l</span><span class="err">-</span><span class="err">-</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="err">t</span><span class="err">e</span><span class="err">x</span><span class="err">t</span> <span class="err">c</span><span class="err">l</span><span class="err">a</span><span class="err">s</span><span class="err">s</span><span class="err">=</span><span class="s2">&#34;title&#34;</span><span class="err">&gt;</span><span class="err">H</span><span class="err">e</span><span class="err">l</span><span class="err">l</span><span class="err">o</span><span class="err">&lt;</span><span class="err">/</span><span class="err">t</span><span class="err">e</span><span class="err">x</span><span class="err">t</span><span class="err">&gt;</span>
<span class="err">&lt;</span><span class="err">b</span><span class="err">u</span><span class="err">t</span><span class="err">t</span><span class="err">o</span><span class="err">n</span> <span class="err">s</span><span class="err">i</span><span class="err">z</span><span class="err">e</span><span class="err">=</span><span class="s2">&#34;mini&#34;</span><span class="err">&gt;</span><span class="err">请</span><span class="err">点</span><span class="err">击</span><span class="err">&lt;</span><span class="err">/</span><span class="err">b</span><span class="err">u</span><span class="err">t</span><span class="err">t</span><span class="err">o</span><span class="err">n</span><span class="err">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>配置结果：</p>
<p><img src="https://s1.ax1x.com/2020/04/07/G2BEVI.md.png" alt="G2BEVI.png"></p>
<h2 id="小程序的双线程模型">小程序的双线程模型</h2>
<p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/4-1.ad156d1c.png" alt="twin-thread"></p>
<p>微信客户端给小程序提供了宿主环境，宿主环境给小程序提供了诸多的功能。在此之上，小程序分为两个线程，一个线程管理<em>渲染层</em>，另一个线程管理<em>逻辑层</em>。渲染层的界面使用了WebView 进行渲染；逻辑层采用JsCore线程运行JS脚本。一个小程序存在多个界面，所以渲染层存在多个WebView线程，这两个线程的通信会经由微信客户端（Native）做中转，逻辑层发送网络请求也经由Native转发。这就是小程序的双线程通信模型。</p>
<p>小程序的逻辑层和渲染层是分开的两个线程。在渲染层，宿主环境会把WXML转化成对应的JS对象，在逻辑层发生数据变更的时候，我们需要通过宿主环境提供的setData方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的Dom树上，渲染出正确的UI界面.</p>
<h2 id="生命周期">生命周期</h2>
<h3 id="app实例">app实例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// app.js
</span><span class="c1"></span><span class="nx">App</span><span class="p">(</span><span class="p">{</span>

  <span class="cm">/**
</span><span class="cm">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）
</span><span class="cm">   */</span>
  <span class="nx">onLaunch</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 获取用户信息
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
    <span class="c1">// 抛出异常测试onError回调
</span><span class="c1"></span>    <span class="c1">// setTimeout(function(){
</span><span class="c1"></span>    <span class="c1">//   const err = new Error
</span><span class="c1"></span>    <span class="c1">//   throw err
</span><span class="c1"></span>    <span class="c1">// }, 3000)
</span><span class="c1"></span>  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 当小程序启动，或从后台进入前台显示，会触发 onShow
</span><span class="cm">   */</span>
  <span class="nx">onShow</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 1.判断小程序的触发场景
</span><span class="c1"></span>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
    <span class="k">switch</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">scene</span><span class="p">)</span><span class="p">{</span>
      <span class="k">case</span> <span class="mi">1001</span><span class="o">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;从发现栏进入小程序&#39;</span><span class="p">)</span>
        <span class="k">break</span>
      <span class="k">case</span> <span class="mi">1011</span><span class="o">:</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;扫描二维码进入程序&#39;</span><span class="p">)</span>
        <span class="k">break</span>
    <span class="p">}</span>
    <span class="c1">// 2.获取用户的信息, 并且获取到用户信息之后, 将用户的信息传递给服务器
</span><span class="c1"></span>    <span class="nx">wx</span><span class="p">.</span><span class="nx">getUserInfo</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 当小程序从前台进入后台，会触发 onHide
</span><span class="cm">   */</span>
  <span class="nx">onHide</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;窗口已关闭&#39;</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息
</span><span class="cm">   */</span>
  <span class="nx">onError</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;系统出现错误&#39;</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">globalData</span><span class="o">:</span><span class="p">{</span>
    <span class="nx">name</span> <span class="o">:</span><span class="s1">&#39;nadia&#39;</span><span class="p">,</span>
    <span class="nx">age</span><span class="o">:</span> <span class="mi">21</span>
  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="page对象">page对象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// home.js
</span><span class="c1"></span><span class="c1">// pages/home/home.js
</span><span class="c1"></span><span class="c1">// getApp()获取App()产生的示例对象
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">getApp</span><span class="p">(</span><span class="p">)</span>

<span class="kr">const</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">globalData</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">age</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">globalData</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>
<span class="nx">Page</span><span class="p">(</span><span class="p">{</span>

  <span class="cm">/**
</span><span class="cm">   * 页面的初始数据
</span><span class="cm">   */</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span> <span class="o">:</span> <span class="nx">name</span><span class="p">,</span>
      <span class="nx">list</span> <span class="o">:</span> <span class="p">[</span><span class="p">]</span>
  <span class="p">}</span><span class="p">,</span>
  
  <span class="cm">/**
</span><span class="cm">   * 生命周期函数--监听页面加载
</span><span class="cm">   */</span>
  <span class="nx">onLoad</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onLoad&#39;</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="nx">wx</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://123.207.32.32:8000/recommend&#39;</span><span class="p">,</span>
      <span class="c1">// 箭头函数中的this一层层向上找
</span><span class="c1"></span>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
        <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">;</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="p">{</span>
          <span class="nx">list</span><span class="o">:</span> <span class="nx">data</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 生命周期函数--监听页面初次渲染完成
</span><span class="cm">   */</span>
  <span class="nx">onReady</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 生命周期函数--监听页面显示
</span><span class="cm">   */</span>
  <span class="nx">onShow</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 生命周期函数--监听页面隐藏
</span><span class="cm">   */</span>
  <span class="nx">onHide</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 生命周期函数--监听页面卸载
</span><span class="cm">   */</span>
  <span class="nx">onUnload</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span><span class="p">,</span>
  <span class="c1">// ------------ 3.监听wxml中相关的一些事件 -------------------
</span><span class="c1"></span>  <span class="nx">handleGetUserInfo</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="nx">handleViewClick</span><span class="p">(</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;哈哈哈被点击了&#39;</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
  <span class="cm">/**
</span><span class="cm">   * 页面相关事件处理函数--监听用户下拉动作
</span><span class="cm">   */</span>
  <span class="nx">onPullDownRefresh</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 页面上拉触底事件的处理函数
</span><span class="cm">   */</span>
  <span class="nx">onReachBottom</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span><span class="p">,</span>

  <span class="cm">/**
</span><span class="cm">   * 用户点击右上角分享
</span><span class="cm">   */</span>
  <span class="nx">onShareAppMessage</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/page-lifecycle.2e646c86.png" alt="page-lifecycle"></p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/" term="微信小程序" label="微信小程序" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Node Js初体验</title>
            <link rel="alternate" type="text/html" href="https://utenau.github.io/posts/node-js%E5%88%9D%E4%BD%93%E9%AA%8C/" />
            <id>https://utenau.github.io/posts/node-js%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
            <updated>2020-03-31T12:36:04+08:00</updated>
            <published>2020-03-20T15:21:43+08:00</published>
            <author>
                    <name>Nadia</name>
                    <uri>https://utenau.github.io/</uri>
                    <email>z.giny@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[本文是通过对下述视频的学习总结而来。本文主要通过三个部分来总结Node.js的初体验。第一部分是对node.js的整体概述，主要讲了它是什么，能干什么，架构和主要特点以及第一个node程序。第二部分主要概括node中的module以及相关的一般性操作。第三部分概述node中的几个常用的内置模块。 [toc]
 概述 什么是Node.js  一个开源的，跨平台的运行JavaScript代码的运行时环境  Node.js能做什么  后端服务 对开发较大规模的，数据密集和实时性的应用有优势 node是应对web服务器高并发性能的产物  Node.js的好处  非常适合原型开发和敏捷开发 快速，高规模 JavaScript Everywhere 和前端保持代码的一致性 大量开源库的生态圈  Node.js的组成 js代码通过js-engine转换成机器码运行，浏览器（如Chrome，edge，Firefox）内置js-engine，运行js代码，浏览器本身就给js提供了一个运行时环境
之前，js仅仅运行在浏览器上。而在2009年之后，Ryan Dahl将Chrome中的V8引擎和一些C++代码组合在一起，使得js有了可以与系统交互等能力。
在node中，我们不再局限于在浏览器时只能操作window这样的全局对象，我们可以和文件系统，和操作系统进行交互，也有了监听端口，处理http的能力.如下代码演示：
 document.findByElementId()「在浏览器中」
  fs.readFileSync(new URL(&lsquo;file://hostname/p/a/t/h/file&rsquo;)); //node中可以操作文件。
 第一个程序 配置环境，在macOS上通过homebrew进行下载安装，CLI键入指令 brew install node,完成安装 新建文件夹用vscode打开，新建一个js文件名为app.]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>本文是通过对下述视频的学习总结而来。本文主要通过三个部分来总结Node.js的初体验。第一部分是对node.js的整体概述，主要讲了它是什么，能干什么，架构和主要特点以及第一个node程序。第二部分主要概括node中的module以及相关的一般性操作。第三部分概述node中的几个常用的内置模块。
[toc]</p>
</blockquote>
<h2 id="概述">概述</h2>
<h3 id="什么是nodejs">什么是Node.js</h3>
<ul>
<li>一个开源的，跨平台的运行JavaScript代码的运行时环境</li>
</ul>
<h3 id="nodejs能做什么">Node.js能做什么</h3>
<ul>
<li>后端服务</li>
<li>对<em>开发较大规模的，数据密集和实时性</em>的应用有优势</li>
<li>node是应对web服务器高并发性能的产物</li>
</ul>
<h3 id="nodejs的好处">Node.js的好处</h3>
<ul>
<li>非常适合原型开发和敏捷开发</li>
<li>快速，高规模</li>
<li><strong>JavaScript Everywhere</strong></li>
<li>和前端保持代码的一致性</li>
<li>大量开源库的生态圈</li>
</ul>
<h3 id="nodejs的组成">Node.js的组成</h3>
<p>js代码通过js-engine转换成机器码运行，浏览器（如<em>Chrome，edge，Firefox</em>）内置js-engine，运行js代码，浏览器本身就给js提供了一个运行时环境</p>
<p><img src="https://s1.ax1x.com/2020/03/20/8glPVU.md.png" alt="Alt text"></p>
<p>之前，js仅仅运行在浏览器上。而在2009年之后，Ryan Dahl将Chrome中的V8引擎和一些C++代码组合在一起，使得js有了可以与系统交互等能力。</p>
<p><img src="https://s1.ax1x.com/2020/03/20/8g18TU.md.png" alt="Alt text"></p>
<p>在node中，我们不再局限于在浏览器时只能操作window这样的全局对象，我们可以和文件系统，和操作系统进行交互，也有了监听端口，处理http的能力.如下代码演示：</p>
<blockquote>
<p><del>document.findByElementId()</del>「在浏览器中」</p>
</blockquote>
<blockquote>
<p>fs.readFileSync(new URL(&lsquo;file://hostname/p/a/t/h/file&rsquo;)); //node中可以操作文件。</p>
</blockquote>
<h3 id="第一个程序">第一个程序</h3>
<p>配置环境，在macOS上通过homebrew进行下载安装，CLI键入指令 <code>brew install node</code>,完成安装
新建文件夹用vscode打开，新建一个js文件名为<code>app.js</code>，输入以下代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">sayHello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello,&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">sayHello</span><span class="p">(</span><span class="nx">Nadia</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>在CLI中输入<code>node app.js</code>,显示”Hello，Nadia&rdquo;.</p>
<h3 id="nodejs的特点">Node.js的特点</h3>
<ul>
<li>单线程</li>
<li>非阻塞IO/异步</li>
<li>事件驱动</li>
</ul>
<h2 id="node-module-system">Node Module System</h2>
<h3 id="global-object">Global Object</h3>
<p>在浏览器中，我们使用js编写代码会使用一些固定的函数、对象或者变量，比如<code>console.log()</code>,这个函数在任意的js代码中都可以使用，是全局属性的。实际上这些全局的变量、函数、对象都是唯一的全局对象<strong>window</strong>的成员，<code>console.log()</code>实际上是<code>window.console.log()</code>，只是在编译中由js engine自动的添加上了。</p>
<p>而在node中，由于node并不面向浏览器的，本身并没有<strong>window</strong>对象，但依然存在掌控全局的对象<strong>global</strong>,所以在node中<code>console.log()</code>=<code>global.console.log()</code></p>
<p>当我们在代码中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">message</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">global</span><span class="p">.</span><span class="nx">message</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>输出的结果是<em>undefined</em>,所以，我们在当前文件中所定义的变量，作用域只限于当前文件，而不是属于全局的变量。</p>
<h3 id="modules">Modules</h3>
<p>由于在开发过程中，随着工程量的的上升，我们难免会出现变量、函数、对象的重名，倘若我们不对此做出相应的区分，那么同一变量名在全局作用域下，新的重名变量会覆盖旧的重名变量，这给开发带来了困难。</p>
<p>因此，node.js中引入了模块（<em>Module</em>）概念，一个文件即为一个模块，模块内部的变量、方法、对象会被模块封装起来，成为模块内私有(面向对象）,作用域限定在模块内，无法被外界访问，区分了重名变量。
<img src="https://s1.ax1x.com/2020/03/20/825nW8.md.png" alt="Module"></p>
<p>那么问题来了，如果我们需要在一个模块中调用另一个模块的成员时，该如何操作呢？</p>
<p>在文件中键入代码<code>console.log(module)</code>,显示下述结果</p>
<pre><code>node subapp.js
Module {
  id: '.',
  exports: {},
  parent: null,
  filename: '/Users/nadia/first-node-app/subapp.js',
  loaded: false,
  children: [],
  paths:
   [ '/Users/nadia/first-node-app/node_modules',
     '/Users/nadia/node_modules',
     '/Users/node_modules',
     '/node_modules' ] }

</code></pre><h3 id="creating-a-module">Creating a Module</h3>
<p>新建一个文件，即为创建一个模块。</p>
<ul>
<li>创建新的文件<em>sublog.js</em></li>
<li>将模块/模块中的成员变成公有</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">sublog</span><span class="p">.</span><span class="nx">js</span>

<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://myurl.com&#39;</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="nx">log</span><span class="p">;</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">endPoint</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="loading-a-module">Loading a Module</h3>
<p>需要其他模块的成员，使用<strong>require(path)</strong>,其中<em>path</em>可填相对路径(字符串)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">subapp</span><span class="p">.</span><span class="nx">js</span>

<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./sublog&#39;</span><span class="p">)</span><span class="p">;</span><span class="c1">//logger是一个对象
</span><span class="c1"></span><span class="nx">logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">logger</span><span class="p">.</span><span class="nx">endPoint</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<pre><code>node subapp.js
http://myurl.com
</code></pre><h3 id="module-wrapper-function">Module Wrapper Function</h3>
<p>在模块代码即将执行的时候，Node.js会把模块用一个函数打包起来，这个函数就是<strong>Module Wrapper Function</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">exports</span><span class="p">,</span> <span class="nx">require</span><span class="p">,</span> <span class="nx">module</span><span class="p">,</span> <span class="nx">__filename</span><span class="p">,</span> <span class="nx">__dirname</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">// Module code actually lives in here
</span><span class="c1"></span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>通过打包函数，模块可以将内部变量的作用域限定在模块内</p>
<p>同时通过exports和require告诉系统接口和想要获得的接口</p>
<p>其中&rsquo;__filename&rsquo;, &lsquo;__dirname'则给出了模块和模块所在文件夹的绝对路径</p>
<h2 id="常见基本模块">常见基本模块</h2>
<h3 id="path-module">Path Module</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">pathObj</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">__filename</span><span class="p">)</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pathObj</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<pre><code>node subapp.js
{ root: '/',
  dir: '/Users/nadia/first-node-app',
  base: 'subapp.js',
  ext: '.js',
  name: 'subapp' }
</code></pre><p>Path模块提供了一些处理文件和目录路径的工具</p>
<h3 id="os-module">OS Module</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">os</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;os&#39;</span><span class="p">)</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">totalMemory</span> <span class="o">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">totalmem</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">freeMemory</span> <span class="o">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">freemem</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Total Memory is &#39;</span> <span class="o">+</span>  <span class="nx">totalMemory</span><span class="p">)</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`</span><span class="sb">Free Momory is </span><span class="si">${</span><span class="nx">freeMemory</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<pre><code>node app.js
Total Memory is 8589934592
Free Momory is 110387200
</code></pre><p>OS模块提供了一系列与操作系统相关的使用方法</p>
<h3 id="file-system-module">File System Module</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span><span class="p">;</span>

    <span class="c1">// const files = fs.readdirSync(&#39;./&#39;);
</span><span class="c1"></span>    <span class="c1">// console.log(files);
</span><span class="c1"></span>
<span class="nx">fs</span><span class="p">.</span><span class="nx">readdir</span><span class="p">(</span><span class="s1">&#39;./&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span><span class="nx">files</span><span class="p">)</span><span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Error&#34;</span><span class="p">,</span><span class="nx">err</span><span class="p">)</span><span class="p">;</span>
    <span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Result&#39;</span><span class="p">,</span> <span class="nx">files</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<pre><code>node app.js
Result [ '.git', 'app.js', 'logger.js' ]
</code></pre><p>File I/O is provided by simple wrappers around standard POSIX functions. To use this module do require(&lsquo;fs&rsquo;). All the methods have asynchronous and synchronous forms.</p>
<h3 id="events-module">Events Module</h3>
<h4 id="event-module-and-event-argument">Event Module and event argument</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">emitter</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

<span class="c1">// Register a listener
</span><span class="c1"></span><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;messageLogged&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Listener logged!&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>
<span class="c1">// Raise an event
</span><span class="c1"></span><span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;messageLogged&#39;</span><span class="p">)</span><span class="p">;</span>

<span class="c1">// register logging listener
</span><span class="c1"></span><span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;messageLogging&#39;</span><span class="p">,</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;messageLogging called&#39;</span> <span class="p">,</span><span class="nx">arg</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>

<span class="c1">//raise logging event
</span><span class="c1"></span><span class="nx">emitter</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;messageLogging&#39;</span><span class="p">,</span><span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">url</span><span class="o">:</span><span class="s2">&#34;http://&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><pre><code>结果：
node app.js
Listener logged!
messageLogging called { id: 1, url: 'http://' }
</code></pre><h4 id="extending-eventemitter">Extending EventEmitter</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
<span class="kr">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">Logger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./logger&#39;</span><span class="p">)</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Logger</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>

<span class="nx">logger</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;messageLogged&#39;</span><span class="p">,</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;messageLogged&#39;</span><span class="p">,</span><span class="nx">arg</span><span class="p">)</span><span class="p">;</span>
<span class="p">}</span><span class="p">)</span><span class="p">;</span>

<span class="nx">logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">logger</span><span class="p">.</span><span class="nx">js</span>
<span class="kr">const</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">)</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://mylogger.io/log&#39;</span><span class="p">;</span>
<span class="kr">class</span> <span class="nx">Logger</span> <span class="kr">extends</span> <span class="nx">EventEmitter</span><span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span><span class="p">;</span>
        <span class="c1">// raise event 
</span><span class="c1"></span>        <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;messageLogged&#39;</span><span class="p">,</span><span class="p">{</span><span class="nx">id</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">url</span><span class="o">:</span><span class="s2">&#34;http://&#34;</span><span class="p">}</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">;</span>


<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Logger</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<pre><code>node app.js
message
messageLogged { id: 1, url: 'http://' }
</code></pre><h3 id="http-module">HTTP Module</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
<span class="kr">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span><span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">===</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&#34;Hello&#34;</span><span class="p">)</span><span class="p">;</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">url</span> <span class="o">===</span> <span class="s1">&#39;/api/courses&#39;</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span><span class="p">)</span><span class="p">)</span><span class="p">;</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="p">)</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span><span class="p">)</span><span class="p">;</span>

<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Listening on port 3000...&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>结果：</p>
<p><img src="https://s1.ax1x.com/2020/03/21/8RSQ6s.md.png" alt="httpResult01">
<img src="https://s1.ax1x.com/2020/03/21/8RSG7V.md.png" alt="httpResult02"></p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/tags/node.js/" term="Node.js" label="Node.js" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Js中的this问题</title>
            <link rel="alternate" type="text/html" href="https://utenau.github.io/posts/js%E4%B8%AD%E7%9A%84this%E9%97%AE%E9%A2%98/" />
            <id>https://utenau.github.io/posts/js%E4%B8%AD%E7%9A%84this%E9%97%AE%E9%A2%98/</id>
            <updated>2020-03-14T10:35:57+08:00</updated>
            <published>2020-03-13T23:34:25+08:00</published>
            <author>
                    <name>Nadia</name>
                    <uri>https://utenau.github.io/</uri>
                    <email>z.giny@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[首先陈述一下遇到本次问题的背景，我是在进行小程序开发学习中，遇到讲师使用了一次箭头函数，并对其使用理由进行了阐释。由于我并没有js的基础，因此我通过这个问题查阅了相关资料，并通过此次机会对相关内容进行总结。
 问题 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  // 代码A  Page({ /** * 页面的初始数据 */ data: { message : name, list : [] }, /** * 生命周期函数--监听页面加载 */ onLoad(){ console.]]></summary>
            
                <content type="html"><![CDATA[<blockquote>
<p>首先陈述一下遇到本次问题的背景，我是在进行小程序开发学习中，遇到讲师使用了一次箭头函数，并对其使用理由进行了阐释。由于我并没有js的基础，因此我通过这个问题查阅了相关资料，并通过此次机会对相关内容进行总结。</p>
</blockquote>
<h1 id="问题">问题</h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 代码A
</span><span class="c1"></span>
<span class="nx">Page</span><span class="p">(</span><span class="p">{</span>

  <span class="cm">/**
</span><span class="cm">   * 页面的初始数据
</span><span class="cm">   */</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">message</span> <span class="o">:</span> <span class="nx">name</span><span class="p">,</span>
      <span class="nx">list</span> <span class="o">:</span> <span class="p">[</span><span class="p">]</span>
  <span class="p">}</span><span class="p">,</span>
  
  <span class="cm">/**
</span><span class="cm">   * 生命周期函数--监听页面加载
</span><span class="cm">   */</span>
    <span class="nx">onLoad</span><span class="p">(</span><span class="p">)</span><span class="p">{</span>
        <span class="nx">console</span><span class="mf">.1</span><span class="nx">og</span><span class="p">(</span><span class="s2">&#34;onLoad&#39;)
</span><span class="s2">        wx.request({
</span><span class="s2">            url:&#34;</span><span class="nx">http</span><span class="o">:</span><span class="c1">//123.207.32.32:8000/recommend&#39;，
</span><span class="c1"></span>            <span class="c1">//箭头函数中的this一层层向上找
</span><span class="c1"></span>            <span class="nx">success</span><span class="o">:</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span><span class="p">=&gt;</span><span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
            <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="p">{</span>
            <span class="nx">list</span><span class="o">:</span><span class="nx">data</span>
        <span class="p">}</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span><span class="p">)</span>
<span class="p">}</span><span class="p">,</span>
</code></pre></td></tr></table>
</div>
</div><p>这段代码是page页面的回调函数，其功能是在页面加载后发送网络请求（URL request），然后将得到的结果（是一段JSON），赋值给在App的data中定义好的list。this的作用是指明page对象，调用setData方法将data赋值给list。</p>
<p>当我们改用普通的方法写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 代码B
</span><span class="c1"></span>    <span class="nx">wx</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://123.207.32.32:8000/recommend&#39;</span><span class="p">,</span>
      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
        <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="p">{</span>
            <span class="nx">list</span><span class="o">:</span> <span class="nx">data</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>此时编译就会报错，打印this后的结果是<strong>undefined</strong> .</p>
<p>在此基础上进一步改写,又得到了正确的结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// 代码C
</span><span class="c1"></span>  <span class="nx">onLoad</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;onLoad&#39;</span><span class="p">)</span>
    <span class="kr">const</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="nx">wx</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="p">{</span>
      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://123.207.32.32:8000/recommend&#39;</span><span class="p">,</span>
      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
        <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">;</span>
        <span class="nx">_this</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="p">{</span>
          <span class="nx">list</span><span class="o">:</span> <span class="nx">data</span>
        <span class="p">}</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="p">)</span>
  <span class="p">}</span><span class="p">,</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="解释">解释</h1>
<p>上述问题的出现跟javascript中<em>this</em>这个关键字的指向有关。this是一个特殊的变量，它始终指向当前的对象。</p>
<p>this必须在对象方法下使用，才能正确地指向当前对象。如果以对象的方法形式调用此方法，可以得到正确的this指向；但如果在对象外单独调用此方法，this就会指向全局对象window。同时，如果在对象方法内的函数中使用this，也得不到正确的对象，this仍会指向window。</p>
<p>于是在js的strict模式下，this会在上述指向<em>window</em>的情况下直接指向<em>undefined</em>，以及时暴露错误。
所以就出现了<em>代码B</em>所出现的错误。</p>
<p>而当我们在<em>wx.request</em>调用的对象之外，在<em>onLoad</em>回调函数之类将this暂存给了变量_this,实际上就是将在onLoad当前的this指向的对象（也就是page对象）赋值给了_this，避免了错误的发生。</p>
<p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。
箭头函数内部的this是<em>词法作用域</em>，由<strong>上下文</strong>确定。
箭头函数完全修复了this的指向，this总是指向<em>词法作用域</em>，也就是外层调用者<strong>obj</strong>。</p>
<p>这就有了<em>代码A</em>的解决方式。</p>
]]></content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/categories/coding/" term="coding" label="coding" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/tags/javascript/" term="javascript" label="javascript" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Hello World</title>
            <link rel="alternate" type="text/html" href="https://utenau.github.io/posts/hello-world/" />
            <id>https://utenau.github.io/posts/hello-world/</id>
            <updated>2020-03-20T15:17:09+08:00</updated>
            <published>2020-03-12T21:06:03+08:00</published>
            <author>
                    <name>Nadia</name>
                    <uri>https://utenau.github.io/</uri>
                    <email>z.giny@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[]]></summary>
            
                <content type="html"><![CDATA[]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://utenau.github.io/tags/test/" term="test" label="test" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">My First Post</title>
            <link rel="alternate" type="text/html" href="https://utenau.github.io/posts/my-first-post/" />
            <id>https://utenau.github.io/posts/my-first-post/</id>
            <updated>2020-03-12T22:22:57+08:00</updated>
            <published>2020-01-30T10:42:20+08:00</published>
            <author>
                    <name>Nadia</name>
                    <uri>https://utenau.github.io/</uri>
                    <email>z.giny@foxmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"><![CDATA[Hello~]]></summary>
            
                <content type="html"><![CDATA[<p>Hello~</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
